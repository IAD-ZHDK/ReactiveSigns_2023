let cols = 40;
let rows = 20;
let inverted = false;

let points = [];

let blocks1 = [
  [0,1,1,1,2,0,0,1,1,1,0,0,3,1,1,1,0,3,1,1,1,2,3,1,1,1,2,3,1,1,2,3,1,1,1,2,0,0,0,0],

  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],

  [1,1,0,1,1,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],
  [1,1,0,1,1,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],

  [1,1,0,1,1,0,1,2,0,1,2,0,1,2,0,1,1,0,3,1,2,0,1,1,0,0,0,1,1,0,0,0,3,1,2,0,0,0,0,0],

  [3,1,1,1,2,0,1,1,1,1,0,0,3,1,0,3,1,2,3,1,2,0,3,1,1,1,2,3,1,1,1,0,3,1,2,0,0,0,0,0],

  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],
  [1,1,0,0,0,0,1,1,0,1,1,0,3,1,0,3,1,2,3,1,2,0,1,1,0,0,0,0,0,1,1,0,3,1,2,0,0,0,0,0],

  [1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,2,0,3,1,2,0,3,1,1,1,2,3,1,1,2,0,3,1,2,0,0,0,0,0],
];

let blocks2 = [
  [3,1,1,2,0,0,1,1,1,2,0,3,1,1,1,0,3,1,1,1,3,1,1,1,2,3,1,1,1,2,0,1,1,1,0,0,0,0,0,0],

  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],

  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],

  [1,1,0,0,0,1,1,0,1,1,0,1,2,0,1,1,0,3,1,2,0,3,1,2,0,1,1,0,0,0,1,2,0,1,2,0,0,0,0,0],

  [3,1,1,1,0,3,1,1,1,2,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,3,1,1,1,2,1,1,1,1,0,0,0,0,0,0],

  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],
  [0,0,1,1,0,1,1,0,0,0,0,3,1,0,3,1,2,3,1,2,0,3,1,2,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0],

  [3,1,1,2,0,1,1,0,0,0,0,0,1,1,1,2,0,3,1,2,0,3,1,2,0,3,1,1,1,2,1,1,0,1,1,0,0,0,0,0],

];

let bgColor = 0; // changes to 255 when 0.95 is hitted (spring.js)
let targetMovingAverage;

function setup() {

/*important!*/ createCanvas(poster.getWindowWidth(), poster.getWindowHeight()); // Don't remove this line. 
/*important!*/ poster.setup(this,  "/Poster_Templates/libraries/assets/models/movenet/model.json", false, false);  // Don't remove this line.

  noCursor();

  textAlign(CENTER, CENTER);
  setupGrid()
  poster.setDebug(true);
  targetMovingAverage = createVector(1, 1);
}

function windowScaled() {
  setupGrid() 
}

function setupGrid() {
   points = [];
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      let x = j  * poster.vw*2.5;
      let y = i * poster.vh*5;
      points.push(new Spring(x, y, blocks1[i][j], blocks2[i][j]));
    }
  }
}

function draw() {


  if (poster.posNormal.x >= 0.80 && !inverted) {
    inverted = true;
    bgColor = 255;
  } else if (poster.posNormal.x <= 0.20 && inverted){
    inverted = false;
    bgColor = 0;
  }

  if(!poster.tracking && poster.oscSignal) {
    // no one is in front of the camera
    // move target to closest side
    let target = createVector(0, height/2);
    if (targetMovingAverage.x > width/2) {
      target.x = width;
    }
    targetMovingAverage.mult(0.9);
    target.mult(0.1);
    targetMovingAverage.add(target);
  } else {
    let target = poster.position.copy();
    targetMovingAverage.mult(0.9);
    target.mult(0.1);
    targetMovingAverage.add(target);
  }

  background(bgColor);
  push();
  noStroke();

 shearX(-PI / 30.0);
  translate(poster.vw*10, 0)

  for (let i = 0; i < points.length; i++) {
    points[i].display(targetMovingAverage);
   //filter(INVERT);
  }
  pop()
  /*important!*/ poster.posterTasks(); // do not remove this last line!  
}

